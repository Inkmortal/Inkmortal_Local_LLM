import React, { useState, useEffect, useCallback } from 'react';
import { useTheme } from '../../context/ThemeContext';
import Card from '../../components/ui/Card';
// Import service functions
import {
  fetchQueueStats,
  fetchQueueItems,
  fetchHistoryItems
} from '../../services/admin';

// Import types
import { QueueItem, HistoryItem, QueueStats } from '../../types/AdminTypes';

// Import components
import StatusCounter from '../../components/admin/StatusCounter';
import DataTable from '../../components/admin/DataTable';
import TabView from '../../components/admin/TabView';
import QueueStatusBadge from '../../components/admin/QueueStatusBadge';
import PriorityBadge from '../../components/admin/PriorityBadge';
import QueueServiceBadge from '../../components/admin/QueueServiceBadge';
import TimeAgo from '../../components/admin/TimeAgo';
import RefreshControls from '../../components/admin/RefreshControls';

// Import utility functions
import { 
  formatDateTime, 
  truncateText, 
  getDefaultQueueStats,
  processQueueItem
} from './QueueMonitorService';

const QueueMonitor: React.FC = () => {
  const { currentTheme } = useTheme();
  
  // State
  const [queueStats, setQueueStats] = useState<QueueStats>(getDefaultQueueStats());
  const [queueItems, setQueueItems] = useState<QueueItem[]>([]);
  const [historyItems, setHistoryItems] = useState<HistoryItem[]>([]);
  const [isLoadingStats, setIsLoadingStats] = useState<boolean>(false);
  const [isLoadingQueue, setIsLoadingQueue] = useState<boolean>(false);
  const [isLoadingHistory, setIsLoadingHistory] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<string>('active');
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);
  const [refreshInterval, setRefreshInterval] = useState<number>(30000); // 30 seconds
  const [autoRefresh, setAutoRefresh] = useState<boolean>(true);
  
  // Define connection status with safe check
  const isConnected = queueStats.queue_connected !== undefined 
    ? queueStats.queue_connected 
    : true; // Default to true if undefined
  
  // Tab definitions
  const tabs = [
    { 
      id: 'active', 
      label: 'Active Queue',
      count: queueStats.total_waiting + queueStats.total_processing
    },
    { 
      id: 'history', 
      label: 'History',
      count: historyItems.length
    }
  ];
  
  // Queue data columns
  const queueColumns = [
    {
      key: 'id',
      header: 'ID',
      width: '80px',
      render: (item: QueueItem) => (
        <span className="text-xs font-mono">
          {item.id ? item.id.substring(0, 8) : 'N/A'}
        </span>
      )
    },
    {
      key: 'status',
      header: 'Status',
      width: '120px',
      render: (item: QueueItem) => (
        <QueueStatusBadge status={item.status || 'unknown'} />
      )
    },
    {
      key: 'priority',
      header: 'Priority',
      width: '100px',
      render: (item: QueueItem) => (
        <PriorityBadge priority={item.priority || 0} />
      )
    },
    {
      key: 'service',
      header: 'Service',
      width: '120px',
      render: (item: QueueItem) => (
        <QueueServiceBadge service={item.service || 'unknown'} />
      )
    },
    {
      key: 'content',
      header: 'Content',
      render: (item: QueueItem) => (
        <div className="max-w-sm overflow-hidden">
          <span className="text-xs" style={{ color: currentTheme.colors.textSecondary }}>
            {truncateText(item.content, 80) || 'No content'}
          </span>
        </div>
      )
    },
    {
      key: 'created_at',
      header: 'Created',
      width: '150px',
      render: (item: QueueItem) => (
        <TimeAgo 
          date={item.created_at || new Date()} 
          textSize="xs"
          color={currentTheme.colors.textMuted}
          showPrefix={false}
        />
      )
    },
    {
      key: 'estimatedCompletion',
      header: 'Est. Completion',
      width: '150px',
      render: (item: QueueItem) => {
        if (item.status !== 'waiting') return <span>-</span>;
        return (
          <span style={{ color: currentTheme.colors.accentPrimary }}>
            {item.estimatedCompletion || 'Unknown'}
          </span>
        );
      }
    }
  ];
  
  // History data columns
  const historyColumns = [
    {
      key: 'id',
      header: 'ID',
      width: '80px',
      render: (item: HistoryItem) => (
        <span className="text-xs font-mono">
          {item.id ? item.id.substring(0, 8) : 'N/A'}
        </span>
      )
    },
    {
      key: 'status',
      header: 'Status',
      width: '120px',
      render: (item: HistoryItem) => (
        <QueueStatusBadge status={item.status || 'unknown'} />
      )
    },
    {
      key: 'service',
      header: 'Service',
      width: '120px',
      render: (item: HistoryItem) => (
        <QueueServiceBadge service={item.service || 'unknown'} />
      )
    },
    {
      key: 'content',
      header: 'Content',
      render: (item: HistoryItem) => (
        <div className="max-w-sm overflow-hidden">
          <span className="text-xs" style={{ color: currentTheme.colors.textSecondary }}>
            {truncateText(item.content, 80) || 'No content'}
          </span>
        </div>
      )
    },
    {
      key: 'created_at',
      header: 'Created',
      width: '180px',
      render: (item: HistoryItem) => (
        <span className="text-xs" style={{ color: currentTheme.colors.textMuted }}>
          {formatDateTime(item.created_at)}
        </span>
      )
    },
    {
      key: 'completed_at',
      header: 'Completed',
      width: '180px',
      render: (item: HistoryItem) => (
        <span className="text-xs" style={{ color: currentTheme.colors.textMuted }}>
          {formatDateTime(item.completed_at)}
        </span>
      )
    }
  ];
  
  // Fetch all data
  const fetchAllData = useCallback(async () => {
    setError(null);
    
    try {
      // Fetch stats
      setIsLoadingStats(true);
      const statsData = await fetchQueueStats();
      if (statsData) {
        setQueueStats(statsData);
      }
      setIsLoadingStats(false);
      
      // Fetch queue items (active tab selected)
      if (activeTab === 'active') {
        setIsLoadingQueue(true);
        const queueData = await fetchQueueItems();
        if (queueData) {
          // Process queue items to add estimated completion time
          const processedItems = queueData.map((item, index) => 
            processQueueItem(item, index, statsData || getDefaultQueueStats())
          );
          setQueueItems(processedItems);
        }
        setIsLoadingQueue(false);
      }
      
      // Fetch history items (history tab selected)
      if (activeTab === 'history') {
        setIsLoadingHistory(true);
        const historyData = await fetchHistoryItems();
        if (historyData) {
          setHistoryItems(historyData);
        }
        setIsLoadingHistory(false);
      }
      
      // Update last updated timestamp
      setLastUpdated(new Date());
    } catch (err) {
      console.error('Error fetching queue data:', err);
      setError('Failed to fetch queue data. Please try again.');
      setIsLoadingStats(false);
      setIsLoadingQueue(false);
      setIsLoadingHistory(false);
    }
  }, [activeTab]);
  
  // Initial data loading
  useEffect(() => {
    fetchAllData();
    
    // Set up auto-refresh interval
    if (autoRefresh) {
      const intervalId = window.setInterval(() => {
        fetchAllData();
      }, refreshInterval);
      
      return () => {
        window.clearInterval(intervalId);
      };
    }
  }, [fetchAllData, refreshInterval, autoRefresh]);
  
  // Handle tab change
  const handleTabChange = (tabId: string) => {
    setActiveTab(tabId);
  };
  
  // Handle refresh now button
  const handleRefresh = () => {
    fetchAllData();
  };
  
  // Toggle auto-refresh
  const toggleAutoRefresh = () => {
    setAutoRefresh(!autoRefresh);
  };
  
  // Status counter items
  const getStatusIcon = (iconType: string) => {
    switch (iconType) {
      case 'waiting':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        );
      case 'processing':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
        );
      case 'completed':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
          </svg>
        );
      case 'error':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
        );
      default:
        return null;
    }
  };
  
  // Connection status indicator
  const connectionStatus = isConnected ? {
    color: currentTheme.colors.success,
    label: 'Connected'
  } : {
    color: currentTheme.colors.error,
    label: 'Disconnected'
  };
  
  return (
    <div className="space-y-6">
      {/* Header with refresh controls */}
      <RefreshControls
        title="Queue Monitor"
        lastUpdated={lastUpdated}
        isLoading={isLoadingStats || isLoadingQueue || isLoadingHistory}
        onRefresh={handleRefresh}
        accentColor={currentTheme.colors.accentPrimary}
        textMutedColor={currentTheme.colors.textMuted}
        bgSecondaryColor={currentTheme.colors.bgSecondary}
        textSecondaryColor={currentTheme.colors.textSecondary}
        borderColor={currentTheme.colors.borderColor}
      >
        <div 
          className="flex items-center text-sm rounded-md px-3 py-1"
          style={{ 
            backgroundColor: `${connectionStatus.color}15`,
            color: connectionStatus.color
          }}
        >
          <span className="inline-block w-2 h-2 rounded-full mr-2" 
            style={{ 
              backgroundColor: connectionStatus.color,
              boxShadow: `0 0 0 2px ${connectionStatus.color}40`,
              ...(isConnected ? { animation: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite' } : {})
            }} 
          />
          {connectionStatus.label}
        </div>
      </RefreshControls>
      
      {/* Queue Stats */}
      <Card title="Queue Status">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <StatusCounter
            count={queueStats.total_waiting || 0}
            label="Waiting"
            icon={getStatusIcon('waiting')}
            color={currentTheme.colors.primary}
            onClick={() => setActiveTab('active')}
            isActive={activeTab === 'active'}
            showIndicator={queueStats.total_waiting > 0}
          />
          
          <StatusCounter
            count={queueStats.total_processing || 0}
            label="Processing"
            icon={getStatusIcon('processing')}
            color={currentTheme.colors.warning}
            onClick={() => setActiveTab('active')}
            isActive={activeTab === 'active'}
            showIndicator={queueStats.total_processing > 0}
          />
          
          <StatusCounter
            count={queueStats.total_completed || 0}
            label="Completed"
            icon={getStatusIcon('completed')}
            color={currentTheme.colors.success}
            onClick={() => setActiveTab('history')}
            isActive={activeTab === 'history'}
          />
          
          <StatusCounter
            count={queueStats.total_error || 0}
            label="Errors"
            icon={getStatusIcon('error')}
            color={currentTheme.colors.error}
            onClick={() => setActiveTab('history')}
            isActive={activeTab === 'history'}
            showIndicator={queueStats.total_error > 0}
          />
        </div>
        
        <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="p-4 rounded-lg"
            style={{ backgroundColor: currentTheme.colors.bgSecondary }}
          >
            <div className="text-sm font-medium mb-1" style={{ color: currentTheme.colors.textSecondary }}>
              Worker Count
            </div>
            <div className="text-xl font-bold" style={{ color: currentTheme.colors.textPrimary }}>
              {queueStats.worker_count || 0}
            </div>
          </div>
          
          <div className="p-4 rounded-lg"
            style={{ backgroundColor: currentTheme.colors.bgSecondary }}
          >
            <div className="text-sm font-medium mb-1" style={{ color: currentTheme.colors.textSecondary }}>
              Avg. Wait Time
            </div>
            <div className="text-xl font-bold" style={{ color: currentTheme.colors.textPrimary }}>
              {queueStats.avg_wait_time ? `${queueStats.avg_wait_time.toFixed(1)}s` : 'N/A'}
            </div>
          </div>
          
          <div className="p-4 rounded-lg"
            style={{ backgroundColor: currentTheme.colors.bgSecondary }}
          >
            <div className="text-sm font-medium mb-1" style={{ color: currentTheme.colors.textSecondary }}>
              Avg. Process Time
            </div>
            <div className="text-xl font-bold" style={{ color: currentTheme.colors.textPrimary }}>
              {queueStats.avg_process_time ? `${queueStats.avg_process_time.toFixed(1)}s` : 'N/A'}
            </div>
          </div>
          
          <div className="p-4 rounded-lg"
            style={{ backgroundColor: currentTheme.colors.bgSecondary }}
          >
            <div className="text-sm font-medium mb-1" style={{ color: currentTheme.colors.textSecondary }}>
              Total Items
            </div>
            <div className="text-xl font-bold" style={{ color: currentTheme.colors.textPrimary }}>
              {(queueStats.total_waiting || 0) + 
               (queueStats.total_processing || 0) + 
               (queueStats.total_completed || 0) + 
               (queueStats.total_error || 0)}
            </div>
          </div>
        </div>
      </Card>
      
      {/* Error message */}
      {error && (
        <div 
          className="p-3 rounded-md"
          style={{
            backgroundColor: `${currentTheme.colors.error}20`,
            color: currentTheme.colors.error,
          }}
        >
          {error}
        </div>
      )}
      
      {/* Tab view for queue/history */}
      <Card>
        <TabView
          tabs={tabs}
          activeTab={activeTab}
          onTabChange={handleTabChange}
          accentColor={currentTheme.colors.accentPrimary}
          textColor={currentTheme.colors.textPrimary}
          inactiveTextColor={currentTheme.colors.textSecondary}
          borderColor={currentTheme.colors.borderColor}
        >
          {activeTab === 'active' ? (
            <DataTable
              data={queueItems}
              columns={queueColumns}
              keyExtractor={(item) => item.id || `queue-${Math.random()}`}
              isLoading={isLoadingQueue}
              emptyStateMessage="No active queue items"
              headerBgColor={currentTheme.colors.bgSecondary}
              headerTextColor={currentTheme.colors.textSecondary}
              rowBgColor={currentTheme.colors.bgPrimary}
              rowHoverColor={currentTheme.colors.bgSecondary}
              borderColor={currentTheme.colors.borderColor}
              textPrimaryColor={currentTheme.colors.textPrimary}
              textSecondaryColor={currentTheme.colors.textSecondary}
            />
          ) : (
            <DataTable
              data={historyItems}
              columns={historyColumns}
              keyExtractor={(item) => item.id || `history-${Math.random()}`}
              isLoading={isLoadingHistory}
              emptyStateMessage="No history items"
              headerBgColor={currentTheme.colors.bgSecondary}
              headerTextColor={currentTheme.colors.textSecondary}
              rowBgColor={currentTheme.colors.bgPrimary}
              rowHoverColor={currentTheme.colors.bgSecondary}
              borderColor={currentTheme.colors.borderColor}
              textPrimaryColor={currentTheme.colors.textPrimary}
              textSecondaryColor={currentTheme.colors.textSecondary}
            />
          )}
        </TabView>
      </Card>
    </div>
  );
};

export default QueueMonitor;